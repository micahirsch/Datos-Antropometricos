modelo_head <- lm(TALLE ~ HEAD.BREADTH, data = datos)
modelo_hae <- lm(TALLE ~ HEAD.BREADTH + ELBOW.HAND.LENGTH, data = datos)
plot3d(modelo_hae, main = 'Modelo TALLE ~ HEAD.BREADTH + ELBOW.HAND.LENGTH', xlab = 'Ancho de cabeza', zlab = 'Talle', ylab = 'Codo a mano')
rglwidget()
par(mfrow = c(1,3))
plot(predict(modelo_elbow) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$ELBOW.HAND.LENGTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'ELBOW.HAND.LENGTH')
abline(0, 1, col = 'red', lwd = 2)
plot(predict(modelo_head) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$HEAD.BREADTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'HEAD.BREADTH')
abline(0, 1, col = 'red', lwd = 2)
plot(predict(modelo_hae) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$HEAD.BREADTH) & !is.na(datos$ELBOW.HAND.LENGTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'HEAD.BREADTH + ELBOW.HAND.LENGTH')
abline(0, 1, col = 'red', lwd = 2)
errores_talle20[errores_talle20$combinacion %in% c('ELBOW.HAND.LENGTH', 'HEAD.BREADTH', 'HEAD.BREADTH + ELBOW.HAND.LENGTH'), c('combinacion', 'err_pred')]
boxplot(FOOT.BREADTH~TALLE, data = datos, outline=FALSE, xlim= c(10, 43), xlab = 'Talle', ylab = 'Ancho del pie', main = 'Boxplot del ancho del pie según talle')
calzado <- sort(unique(datos$TALLE))[-c(1:4, 52:59)]
resul2 <- matrix(NA, nrow = length(calzado),  ncol = 4)
colnames(resul2) <- c('talle', 'cant de personas', 'Porcentaje de disminución en cuartil 0.25', 'Porcentaje de aumento en cuartil 0.75')
for (x in 1:length(calzado)) {
q25 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.25), na.rm = TRUE)
q50 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.50), na.rm = TRUE)
q75 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.75), na.rm = TRUE)
resul2[x, 'talle'] <- calzado[x]
resul2[x, 'cant de personas'] <- nrow(datos[datos$TALLE == calzado[x] & !is.na(datos$FOOT.BREADTH), ])
resul2[x, 'Porcentaje de disminución en cuartil 0.25'] <- 100 - q25*100/q50
resul2[x, 'Porcentaje de aumento en cuartil 0.75'] <- q75*100/q50 - 100
}
as.data.frame(resul2)
aggregate(FOOT.BREADTH~TALLE, data = datos, sd)[-c(1,2,53:59),]
plot(FOOT.BREADTH ~ TALLE, data = datos, col = col_sex[datos$SEX], xlab= 'Talle', ylab = 'Ancho del pie', main = 'Ancho del pie en función del talle')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 1)
boxplot(SPHYRION.HEIGHT~TALLE, data = datos, outline=FALSE, xlab = 'Talle', ylab = 'Altura del empeine', main = 'Boxplot de la altura del empeine según talle')
calzado <- sort(unique(datos$TALLE))[-c(1:4, 54:59)]
resul <- matrix(NA, nrow = length(calzado),  ncol = 4)
colnames(resul) <- c('talle', 'cant de personas', 'Porcentaje de disminución en cuartil 0.25', 'Porcentaje de aumento en cuartil 0.75')
for (x in 1:length(calzado)) {
q25 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.25), na.rm = TRUE)
q50 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.50), na.rm = TRUE)
q75 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.75), na.rm = TRUE)
resul[x, 'talle'] <- calzado[x]
resul[x, 'cant de personas'] <- nrow(datos[datos$TALLE == calzado[x] & !is.na(datos$SPHYRION.HEIGHT), ])
resul[x, 'Porcentaje de disminución en cuartil 0.25'] <- 100 - q25*100/q50
resul[x, 'Porcentaje de aumento en cuartil 0.75'] <- q75*100/q50 - 100
}
as.data.frame(resul)
aggregate(SPHYRION.HEIGHT~TALLE, data = datos, sd)
plot(SPHYRION.HEIGHT ~ TALLE, data = datos, col = col_sex[datos$SEX], xlim=c(18, 50), xlab = 'Talle', ylab = 'Altura del empeine', main = 'Altura del empiene en función del talle')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 1)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
rglwidget()
setwd("C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos")
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
library(magick)
install.packages("magick")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
setwd("C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos")
list.files(path='/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
library(magick)
library(magick)
library(magrittr)
list.files(path='/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
setwd("C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos")
list.files(path='C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
library(rgl)
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
rglwidget(width = 720, height = 720)
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
rglwidget(width = 720, height = 720)
Angle1 <- 5
gif.delay <- 3
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie', width = 720, height = 720)
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
Angle1 <- 5
gif.delay <- 3
dev.new(width=720, height=720)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
par3d(cex=10)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=2.0)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=1.0)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=1.5)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=0.5)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=0.7)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=0.8)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
par3d(cex=0.75)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle1 <- 5
gif.delay <- 3
dev.new(width=720, height=720)
par3d(cex=0.75)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
list.files(path='C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
Angle1 <- 5
gif.delay <- 3
dev.new(width=720, height=720)
par3d(cex=0.75)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
list.files(path='C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
Angle1 <- 5
gif.delay <- 3
dev.new(width=720, height=720)
par3d(cex=0.75)
plot3d(TALLE~STATURE+AGE, col= col_sex[datos[, 'SEX']], xlab = 'Estatura', ylab = 'Edad', zlab = 'Talle')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
list.files(path='C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
Angle1 <- 5
gif.delay <- 3
dev.new(width=720, height=720)
par3d(cex=0.75)
plot3d(WEIGHT~AGE+STATURE, data=datos, col = col_sex[datos$SEX], zlab = 'Peso', xlab = 'Edad', ylab = 'Estatura')
Angle <- rep(Angle1 * pi / 180, 360/Angle1)
dir.create("animation")
Animation.dir <- paste(getwd(), "/animation/", sep="")
for (i in seq(Angle)) {
view3d(userMatrix = rotate3d(par3d("userMatrix"),
Angle[i], 0, 0, 1))
rgl.snapshot(filename=paste(paste(Animation.dir, "frame-", sep=""),
sprintf("%03d", i), ".png", sep=""))
}
move.to.animation.dir <- paste("cd", Animation.dir, "&&")
ImageMagick.code <- paste("convert -delay ", gif.delay,
" -loop 0 frame*.png animated.gif", sep="")
run.into.console <- paste(move.to.animation.dir, ImageMagick.code)
system(run.into.console)
list.files(path='C:/Users/USUARIO/Desktop/Carreras/Laboratorio de Datos/Instituto del Cálculo/TP Final Grupal/final-labodatos/animation/', pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4) %>% # animates, can opt for number of loops
image_write("FileName.gif") # write to current dir
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
rglwidget()
datos <- read.csv('chicos.csv')
algunas_filas <- sample(1:nrow(datos), 10)
datos[algunas_filas,]
obligatorios <- c('WEIGHT', 'STATURE', 'SEX', 'RACE', 'AGE.IN.MONTHS')
escogidos <- c('ELBOW.HAND.LENGTH', 'HEAD.BREADTH', 'FOOT.LENGTH', 'FOOT.BREADTH', 'SPHYRION.HEIGHT')
datos$WEIGHT <- datos$WEIGHT / 10
datos$AGE <- datos$AGE.IN.MONTHS / 12
datos$STATURE <- datos$STATURE / 10
datos[, escogidos] <- datos[, escogidos] / 10
head(datos[, c(obligatorios, escogidos)])
datos[datos == 0] <- NA
datos <- datos[!is.na(datos$AGE),]
summary(datos[, escogidos])
# boxplot(datos[, escogidos], las = 2, outline = FALSE, xlab = 'Variables', ylab = 'cm', )
apply(datos[, escogidos], 2, function(x) sum(is.na(x)))
datos$SEX <- factor(datos$SEX, labels = c('masculino', 'femenino'))
datos$RACE <- factor(datos$RACE, labels = c('white', 'black', 'oriental', 'am. indian', 'mixed'))
layout(t(c(1,2,2)))
boxplot(STATURE ~ SEX, data = datos, ylim = range(datos$STATURE, na.rm = TRUE), xlab = 'Sexo', ylab = 'Estatura', main = 'Boxplot de estatura según sexo')
boxplot(STATURE ~ RACE, data = datos, ylim = range(datos$STATURE, na.rm = TRUE), xlab = 'Raza', ylab = 'Estatura', main = 'Boxplot de estatura según raza')
text(1:length(levels(datos$RACE)), range(datos$STATURE, na.rm = TRUE)[2] + 0.2, paste('n =', table(datos$RACE)))
normalizar <- function(vec){
return((vec - min(vec)) / (max(vec) - min(vec)))
}
masomenos <- function(x, y, tol) {
return(y <= x + tol & y >= x - tol)
}
STATURE_norm <- normalizar(datos[!is.na(datos$STATURE), 'STATURE'])
AGE_norm <- normalizar(datos[datos$AGE, 'AGE'])
plot(WEIGHT ~ AGE, datos, col = rgb(STATURE_norm, 0, 1 - STATURE_norm), pch = 4, xlab = 'Edad', ylab = 'Peso', main = 'Peso en función de la edad')
legend('topleft', legend = c('más alto', 'menos alto'), col = c('red', 'blue'), pch = 4)
plot(WEIGHT ~ STATURE, datos,
col = ifelse(masomenos(datos$AGE, median(datos$AGE), 0.5), 'green', rgb(AGE_norm, 0, 1 - AGE_norm)),
pch = 4, xlab = 'Estatura', ylab = 'Peso', main = 'Peso en función de la estatura')
legend('topleft', legend = c('más edad', 'menos edad'), col = c('red', 'blue'), pch = 4)
coplot(STATURE ~ AGE | RACE + SEX, datos, rows = 1, xlab = c('Edad', 'Raza'),
ylab = c('Estatura', 'Sexo'))
col_sex <- c('green', 'magenta')
names(col_sex) <- levels(datos$SEX)
plot(WEIGHT ~ AGE, datos, col = col_sex[datos$SEX], pch = 4, xlab = 'Edad', ylab = 'Peso', main = 'Peso en función de la edad')
legend('topleft', legend = levels(datos$SEX), col = col_sex, pch = 4)
plot(WEIGHT ~ STATURE, datos,
col = col_sex[datos$SEX],
pch = 4, xlab = 'Estatura', ylab = 'Peso (escala logarítmica)', log='y', main = 'Peso en función de la estatura')
legend('topleft', legend = levels(datos$SEX), col = col_sex, pch = 4)
modelo_edadf <- lm(WEIGHT~AGE, data=datos[datos$SEX=='femenino', ])
modelo_edadf
modelo_edadm <- lm(WEIGHT~AGE, data=datos[datos$SEX=='masculino', ])
modelo_edadm
modelo_edadf2 <- lm(WEIGHT~poly(AGE, 2), data=datos[datos$SEX=='femenino', ])
modelo_edadf2
modelo_edadm2 <- lm(WEIGHT~poly(AGE, 2), data=datos[datos$SEX=='masculino', ])
modelo_edadm2
plot(WEIGHT ~ AGE, datos, col = col_sex[datos$SEX], pch = 4, xlab = 'Edad', ylab = 'Peso', main = 'Edad en función del peso con los modelos')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 4)
abline(modelo_edadf, col = '#6F00E6', lwd=2)
abline(modelo_edadm, lwd=2)
lines(1:20, predict(modelo_edadf2, newdata = data.frame('AGE' = 1:20)), col = '#6F00E6', lwd=2, lty=2)
lines(1:20, predict(modelo_edadm2, newdata = data.frame('AGE' = 1:20)), lwd=2, lty=2)
legend('topleft', legend= c('masculino lineal','femenino lineal', 'masculino cuadrático', 'femenino cuadrático'), col = c('black', '#6F00E6', 'black', '#6F00E6'), lty = c(1, 1, 2, 2), lwd = 3)
MAE <- function(x, y) {
return(sum(abs(x - y)) / length(x))
}
PMAE <- function(x, y) {
return(sum(abs(x - y)) / sum(x))
}
crossval <- function(datos, formu, n_obs, fun_error, n_muestras = 1) {
errores <- NULL
for (i in 1:n_muestras) {
samp_ev <- sample(1:nrow(datos), n_obs)
modelo <- lm(formu, data = datos[-samp_ev,])
error <- fun_error(predict(modelo, datos[samp_ev,]), datos[samp_ev, toString(formu[[2]])])
errores <- c(errores, error)
}
return(list(errores = errores, promedio = mean(errores), varianza = var(errores), formula = formu, modelo = lm(formu, data = datos)))
}
error_lineal_fem <- crossval(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ], as.formula('WEIGHT ~ AGE'),0.2*nrow(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_lineal_masc <- crossval(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ], as.formula('WEIGHT ~ AGE'),0.2*nrow(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_cuadratico_fem <- crossval(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ], as.formula(paste('WEIGHT ~ poly(AGE,', 2, ')')),0.2*nrow(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_cuadratico_masc <- crossval(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ], as.formula(paste('WEIGHT ~ poly(AGE,', 2, ')')),0.2*nrow(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
errores_modelos <- matrix(NA, ncol = 3, nrow = 4)
colnames(errores_modelos) <- c('Modelo', 'Error de ajuste', 'Error de predicción')
errores_modelos[,'Modelo'] <- c('Femenino Lineal', 'Masculino Lineal', 'Femenino Cuadrático', 'Masculino Cuadrático')
errores_modelos[, 'Error de ajuste'] <- c(round(PMAE(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_lineal_fem$modelo)), 4), round(PMAE(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_lineal_masc$modelo)), 4), round(PMAE(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_cuadratico_fem$modelo)), 4), round(PMAE(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_cuadratico_masc$modelo)),4) )
errores_modelos[, 'Error de predicción'] <- c(round(error_lineal_fem$promedio, 4), round(error_lineal_masc$promedio, 4), round(error_cuadratico_fem$promedio, 4), round(error_cuadratico_masc$promedio, 4))
as.data.frame(errores_modelos)
# install.packages('rgl')
library('rgl')
plot3d(WEIGHT~AGE+STATURE, data=datos, col = col_sex[datos$SEX], xlab = 'Edad', ylab  = 'Estatura', zlab = 'Peso')
rglwidget()
col_raza <- c('#FF9E01', '#5E29FF', 'lightblue', '#41E80C', '#EB13C5')
names(col_raza) <- levels(datos$RACE)
plot(STATURE~AGE, datos, col=col_raza[datos$RACE], pch=4, xlab = 'Edad', ylab = 'Estatura', main = 'Estatura en función de la edad para todas las razas')
legend('topleft', legend = levels(datos$RACE), col = col_raza, pch = 4)
modelo_alturab <- lm(STATURE~AGE, data = datos[datos$RACE=='black',])
modelo_alturab
modelo_alturaw <- lm(STATURE~AGE, data = datos[datos$RACE=='white',])
modelo_alturaw
plot(STATURE~AGE, datos, col=col_raza[datos[datos$RACE == 'black' | datos$RACE == 'white', ]$RACE], xlab = 'Edad', ylab = 'Estatura', main = 'Estatura en función de la edad para personas blacas y negras')
abline(modelo_alturab, col='magenta', lwd = 2)
abline(modelo_alturaw, col='green', lwd = 2)
legend('bottomright', legend = c('white', 'black'), col = col_raza, pch = 4)
legend('topleft', legend = c('Blanco lineal', 'Negro lineal'), col = c('magenta', 'green'), lty = c(1, 1), lwd = 2)
talle <- function(longitud) {
return(ceiling((longitud + 2*0.667) / 0.667 /0.5) * 0.5)
}
datos$TALLE <- talle(datos$FOOT.LENGTH)
head(datos$TALLE)
plot3d(TALLE~ELBOW.HAND.LENGTH+AGE, datos, col= col_sex[datos$SEX], xlab = 'Medida del codo a la mano', ylab = 'Edad', zlab = 'Talle')
#legend('topleft', legend = levels(datos_usados$SEX), col = col_sex, pch = 4)
rglwidget()
modelo_w <- lm(TALLE~WEIGHT, datos)
plot(TALLE~WEIGHT, datos, log='x', xlab = 'Peso (escala logarítmica)', ylab = 'Talle', main = 'Talle en función del peso')
lines(1:100, predict(modelo_w, newdata = data.frame('WEIGHT' = 1:100)), col = 'red', lwd=2)
modelo_as <- lm(TALLE~AGE+STATURE, datos)
plot3d(modelo_as, col= col_sex[datos[!is.na(datos$TALLE) & !is.na(datos$AGE) & !is.na(datos$STATURE), 'SEX']], xlab = 'Edad', ylab = 'Estatura', zlab = 'Talle')
rglwidget()
sin_NAs <- function(datos, columnas){ #devuelve índices sin NAs
return(which(apply(datos[columnas], 1, function (x) !any(is.na(x)))))
}
comb_lineal <- function(datos, independientes, dependiente, tamanio=length(independientes)) {
errores <- NULL
for (m in 1:tamanio) {
validos <- sin_NAs(datos, c(dependiente, independientes))
combinaciones <- combn(independientes, m)
for (i in 1:ncol(combinaciones)) {
val <- crossval(datos[validos,], as.formula(paste(dependiente, ' ~ ', paste(combinaciones[,i], collapse = ' + '))), 20, PMAE, 2)
errores <- rbind(errores, data.frame(combinacion = paste(combinaciones[,i], collapse = ' + '),
err_pred = val$promedio,
err_ajus = PMAE(datos[validos, dependiente], predict(val$modelo)),
varianza = val$varianza,
num_variables = length(combinaciones[,i]) ))
}
}
return(errores)
}
boxplot(datos[, 'FOOT.LENGTH'], main='Medida de pie')
quantile(datos[, 'FOOT.LENGTH'], na.rm = TRUE)
boxplot(datos[, 'TALLE'], main='Talle')
errores_talle20 <- read.csv('errores_talle_20.csv')
errores_talle20 <- errores_talle20[,-1]
errores_talle20$err_pred <- round(errores_talle20$err_pred, 4)
head(errores_talle20)
modelo_elbow <- lm(TALLE ~ ELBOW.HAND.LENGTH, data = datos)
plot(TALLE ~ ELBOW.HAND.LENGTH, datos, main = 'Modelo TALLE~ELBOW.HAND.LENGTH', xlab = 'Medida del codo a la mano', ylab = 'Talle')
abline(modelo_elbow, col = 'red', lwd = 2)
modelo_head <- lm(TALLE ~ HEAD.BREADTH, data = datos)
modelo_hae <- lm(TALLE ~ HEAD.BREADTH + ELBOW.HAND.LENGTH, data = datos)
plot3d(modelo_hae, main = 'Modelo TALLE ~ HEAD.BREADTH + ELBOW.HAND.LENGTH', xlab = 'Ancho de cabeza', zlab = 'Talle', ylab = 'Codo a mano')
rglwidget()
par(mfrow = c(1,3))
plot(predict(modelo_elbow) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$ELBOW.HAND.LENGTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'ELBOW.HAND.LENGTH')
abline(0, 1, col = 'red', lwd = 2)
plot(predict(modelo_head) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$HEAD.BREADTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'HEAD.BREADTH')
abline(0, 1, col = 'red', lwd = 2)
plot(predict(modelo_hae) ~ TALLE, datos[!is.na(datos$TALLE) & !is.na(datos$HEAD.BREADTH) & !is.na(datos$ELBOW.HAND.LENGTH),],xlab = 'Talle observado', ylab = 'Talle predicho', ylim = c(20, 50), main = 'HEAD.BREADTH + ELBOW.HAND.LENGTH')
abline(0, 1, col = 'red', lwd = 2)
errores_talle20[errores_talle20$combinacion %in% c('ELBOW.HAND.LENGTH', 'HEAD.BREADTH', 'HEAD.BREADTH + ELBOW.HAND.LENGTH'), c('combinacion', 'err_pred')]
boxplot(FOOT.BREADTH~TALLE, data = datos, outline=FALSE, xlim= c(10, 43), xlab = 'Talle', ylab = 'Ancho del pie', main = 'Boxplot del ancho del pie según talle')
calzado <- sort(unique(datos$TALLE))[-c(1:4, 52:59)]
resul2 <- matrix(NA, nrow = length(calzado),  ncol = 4)
colnames(resul2) <- c('talle', 'cant de personas', 'Porcentaje de disminución en cuartil 0.25', 'Porcentaje de aumento en cuartil 0.75')
for (x in 1:length(calzado)) {
q25 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.25), na.rm = TRUE)
q50 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.50), na.rm = TRUE)
q75 <- quantile(datos[datos$TALLE== calzado[x] , 'FOOT.BREADTH'], c(0.75), na.rm = TRUE)
resul2[x, 'talle'] <- calzado[x]
resul2[x, 'cant de personas'] <- nrow(datos[datos$TALLE == calzado[x] & !is.na(datos$FOOT.BREADTH), ])
resul2[x, 'Porcentaje de disminución en cuartil 0.25'] <- 100 - q25*100/q50
resul2[x, 'Porcentaje de aumento en cuartil 0.75'] <- q75*100/q50 - 100
}
as.data.frame(resul2)
aggregate(FOOT.BREADTH~TALLE, data = datos, sd)[-c(1,2,53:59),]
plot(FOOT.BREADTH ~ TALLE, data = datos, col = col_sex[datos$SEX], xlab= 'Talle', ylab = 'Ancho del pie', main = 'Ancho del pie en función del talle')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 1)
boxplot(SPHYRION.HEIGHT~TALLE, data = datos, outline=FALSE, xlab = 'Talle', ylab = 'Altura del empeine', main = 'Boxplot de la altura del empeine según talle')
calzado <- sort(unique(datos$TALLE))[-c(1:4, 54:59)]
resul <- matrix(NA, nrow = length(calzado),  ncol = 4)
colnames(resul) <- c('talle', 'cant de personas', 'Porcentaje de disminución en cuartil 0.25', 'Porcentaje de aumento en cuartil 0.75')
for (x in 1:length(calzado)) {
q25 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.25), na.rm = TRUE)
q50 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.50), na.rm = TRUE)
q75 <- quantile(datos[datos$TALLE== calzado[x] , 'SPHYRION.HEIGHT'], c(0.75), na.rm = TRUE)
resul[x, 'talle'] <- calzado[x]
resul[x, 'cant de personas'] <- nrow(datos[datos$TALLE == calzado[x] & !is.na(datos$SPHYRION.HEIGHT), ])
resul[x, 'Porcentaje de disminución en cuartil 0.25'] <- 100 - q25*100/q50
resul[x, 'Porcentaje de aumento en cuartil 0.75'] <- q75*100/q50 - 100
}
as.data.frame(resul)
aggregate(SPHYRION.HEIGHT~TALLE, data = datos, sd)
plot(SPHYRION.HEIGHT ~ TALLE, data = datos, col = col_sex[datos$SEX], xlim=c(18, 50), xlab = 'Talle', ylab = 'Altura del empeine', main = 'Altura del empiene en función del talle')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 1)
plot3d(SPHYRION.HEIGHT~FOOT.LENGTH+FOOT.BREADTH, data = datos, zlab = 'Altura del empeine', xlab = 'Largo del pie', ylab = 'Ancho del pie')
rglwidget()
plot3d(TALLE~STATURE+AGE, col= col_sex[datos[, 'SEX']], xlab = 'Estatura', ylab = 'Edad', zlab = 'Talle')
rglwidget()
sample(1:3)
